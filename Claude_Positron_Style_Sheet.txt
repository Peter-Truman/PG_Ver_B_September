# IRRISYS PIC18F2525 Embedded System Coding Style Sheet

## Language & Platform
- **Language**: BASIC for PIC microcontroller
- **Target**: PIC18F2525 embedded system with LCD menu interface
- **Compiler**: Requires balanced control structures (If/EndIf, Select/EndSelect, While/Wend)

## Variable Naming Conventions
- **B_**: Byte variables (8-bit)
- **W_**: Word variables (16-bit) 
- **L_**: Long/Dword variables (32-bit)
- **S_**: Signed variables

## Procedure & Function Standards
- **Procedure naming**: `P_` prefix for procedures
- **Function naming**: `F_` prefix for functions
- **Inline editors**: `P_Edit[Type]Inline()` format
- **Menu procedures**: `V_[MenuName]()` format

## Control Structure Requirements
- **All If statements must have matching EndIf**
- **All Select statements must have matching EndSelect**
- **All While statements must have matching Wend**
- **Missing EndIf/EndSelect causes compilation errors**

## Loop Exit Conventions
- **While/Wend loops**: Use `Goto [label]` to exit (not `Break` or `ExitProc`)
- **Labels are global**: Use unique names like `Exit_[ShortName]` 
- **Label length limit**: Keep labels short due to compiler limitations
- **Example**: `Exit_EDEdit` instead of `ExitEnableEditor`

## Critical Section Protection
- **ISR synchronization**: Wrap critical sections with `GIE = 0` / `GIE = 1`
- **Button event handling**: Protect `B_KeyEvent` read/clear operations
- **Example**:
  ```basic
  GIE = 0
  Result = B_KeyEvent
  B_KeyEvent = 0
  GIE = 1
  ```

## Variable Scope Management
- **Local variables**: Use `Dim` declarations at procedure start
- **Avoid global variable collisions**: Use unique local variable names
- **Variable collision pattern**: Multiple procedures using same local names
- **Solution**: Rename locals with procedure-specific prefixes

## ISR (Interrupt Service Routine) Guidelines
- **Timing**: Button timing moved from 10ms to 1ms block
- **Increment**: Changed from +10 to +1 for proper timing
- **Variables**: `B_KeyEvent`, `W_BtnHoldMS`, `B_VLongPress`

## LCD Display Standards
- **Position format**: `LCD_SetCursor(row, column)`
- **Character writing**: `LCD_WriteDat(ascii_value)`
- **Field clearing**: `P_ClrValFld(row, column)`
- **Right-justification**: Pad with spaces for alignment

## Inline Editor Patterns
- **Entry beep**: `P_Beeps(1)` when entering edit mode
- **Parentheses display**: Show `(value)` during editing
- **2Hz blink timing**: 250ms intervals using `L_Millis`
- **Exit conditions**: 
  - Long press: Cancel (restore original)
  - Short press: Commit changes
  - Timeout: Cancel (restore original)

## Debug Output Conventions
- **Format**: `HRSOut "message", 13` for serial console
- **Debug prefixes**: "DEBUG: " for debug messages
- **Variable display**: `Dec variable_name` for numeric values
- **Entry/exit logging**: Log procedure entry and return values

## Menu Navigation Standards
- **Encoder handling**: `P_ReadEnc()` for navigation
- **Button handling**: `P_ReadBtn()` and `P_GetKeyEvt()`
- **Selection highlighting**: `[Selected Item]` vs `Item`
- **Screen refresh**: `Set b_ScrDirty` to trigger redraw

## Code Organization
- **Segmented approach**: Divide large codebase into numbered sections
- **Section 8**: Contains inline editor procedures
- **Modular design**: Separate procedures for each function
- **Navigation codes**: Return values for menu flow control

## Error Prevention
- **Balanced structures**: Always match If/EndIf, Select/EndSelect
- **Variable initialization**: Clear variables at procedure entry
- **State cleanup**: Reset flags when entering/exiting menus
- **Race condition prevention**: Use interrupt protection for shared variables

## Common Patterns
- **Menu procedures**: Local selection variables, scrolling logic, button handling
- **Inline editors**: Blink timing, bracket display, value validation
- **State management**: Screen dirty flags, navigation codes, timeout handling
- **EEPROM operations**: Configuration saving with validation and checksums

## Debugging Strategies
- **Systematic approach**: Fix one issue at a time
- **Debug output**: Add logging to trace execution flow
- **Variable tracking**: Log variable states at key points
- **Critical section analysis**: Check for race conditions in ISR interactions